// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// binaryLogLikelihood
double binaryLogLikelihood(NumericVector intData, int d);
RcppExport SEXP _ising_binaryLogLikelihood(SEXP intDataSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type intData(intDataSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(binaryLogLikelihood(intData, d));
    return rcpp_result_gen;
END_RCPP
}
// computeP
NumericVector computeP(NumericVector h, NumericMatrix J);
RcppExport SEXP _ising_computeP(SEXP hSEXP, SEXP JSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type h(hSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type J(JSEXP);
    rcpp_result_gen = Rcpp::wrap(computeP(h, J));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ising_binaryLogLikelihood", (DL_FUNC) &_ising_binaryLogLikelihood, 2},
    {"_ising_computeP", (DL_FUNC) &_ising_computeP, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_ising(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
